"###############################################################################
"# NEOVIM CONFING
"###############################################################################

" precede each line with its line	number
set number  

" Show the line number relative to the line with the cursor in front of
"	each line. Relative line numbers help you use the |count| you can
"	precede some vertical motion commands (e.g. j k + -) with, without
"	having to calculate it yourself. Especially useful in combination with
"	other commands (e.g. y d c < > gq gw =).
set relativenumber

" Number of spaces that a <Tab> in the file counts for
set tabstop=2 

" Number of spaces that a <Tab> counts for while performing editing
"	operations, like inserting a <Tab> or using <BS>.  It "feels" like
"	<Tab>s are being inserted, while in fact a mix of spaces and <Tab>s is used.
set softtabstop=2

" Returns the effective value of 'shiftwidth'. This is the
" 'shiftwidth' value unless it is zero, in which case it is the
" 'tabstop' value.
set shiftwidth=2

" In Insert mode: Use the appropriate number of spaces to insert a <Tab>.
set expandtab

" Do smart autoindenting when starting a new line.
set smartindent

"  If the 'exrc' option is on (which is NOT the default), the current
"	directory is searched for two files.  The first that exists is used,
"	the others are ignored.
"	-  The file ".nvimrc"
"	-  The file ".exrc"
set exrc

" Stop the highlighting for the 'hlsearch' option.
set nohlsearch

" When off a buffer is unloaded (including loss of undo information)
"	when it is |abandon|ed.  When on a buffer becomes hidden when it is
"	|abandon|ed.  A buffer displayed in another window does not become
"	hidden, of course.
set hidden

" Ring the bell (beep or screen flash) for error messages.  This only
" makes a difference for error messages, the bell will be used always
"	for a lot of errors without a message (e.g., hitting <Esc> in Normal
"	mode).
set noerrorbells

" This option changes how text is displayed.  It doesn't change the text
"	in the buffer, see 'textwidth' for that.
"	When on, lines longer than the width of the window will wrap and
"	displaying continues on the next line.  When off lines will not wrap
"	and only part of long lines will be displayed.  When the cursor is
"	moved to a part that is not shown, the screen will scroll
"	horizontally.
set nowrap

" Override the 'ignorecase' option if the search pattern contains upper
" case characters.  Only used when the search pattern is typed and
"	'ignorecase' option is on.  Used for the commands "/", "?", "n", "N",
"	":g" and ":s".  Not used for "*", "#", "gd", tag search, etc.  After
"	"*" and "#" you can make 'smartcase' used by doing a "/" command,
"	recalling the search pattern from history and hitting <Enter>.
set smartcase

" Execute {command}. If it contains a command that loads a new
" buffer, it will be loaded without creating a swapfile and the
" 'swapfile' option will be reset.  If a buffer already had a
" swapfile it is not removed and 'swapfile' is not reset.
set noswapfile

"	file has been successfully written.  If you do not want to keep the
"	backup file, but you do want a backup while the file is being
"	written, reset this option and set the 'writebackup' option (this is
"	the default).  If you do not want a backup file at all reset both
"	options (use this if your file system is almost full).  See the
"	|backup-table| for more explanations.
"	When the 'backupskip' pattern matches, a backup is not made anyway.
"	When 'patchmode' is set, the backup may be renamed to become the
"	oldest version of a file.
set nobackup


" List of directory names for undo files, separated with commas.
set undodir=~/.vim/undodir

" !(todo) 
set undofile

"	While typing a search command, show where the pattern, as it was typed
"	so far, matches.  The matched string is highlighted.  If the pattern
"	is invalid or not found, nothing is shown.  The screen will be updated
"	often, this is only useful on fast terminals.
set incsearch

"	Minimal number of screen lines to keep above and below the cursor.
set scrolloff=8

set colorcolumn=80
set signcolumn=yes

set wildmode=longest,list,full

if hlanguage messages English_United Statesas('win32')
  language messages English_United States
elseif has('mac')
elseif has('unix')
endif

" set langmenu=en_US.UTF-8
" language en_US.utf8

" colorscheme dracula

set guifont=Iosevka:h11
set encoding=UTF-8

call plug#begin('~/.vim/plugged')
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'gruvbox-community/gruvbox'
  Plug 'vimwiki/vimwiki'

  Plug 'nvim-treesitter/nvim-treesitter'
  Plug 'p00f/nvim-ts-rainbow'
  Plug 'ryanoasis/vim-devicons'

  Plug 'honza/vim-snippets'

"  Plug 'scrooloose/nerdtree'
"  Plug 'preservim/nerdcommenter'

  Plug 'mhinz/vim-startify'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}

  " File tree
  Plug 'kyazdani42/nvim-web-devicons' " optional, for file icons
  Plug 'kyazdani42/nvim-tree.lua'

  " RUST plugins

  " Collection of common configurations for the Nvim LSP client
  Plug 'neovim/nvim-lspconfig'

  " Completion framework
  Plug 'hrsh7th/nvim-cmp'

  " LSP completion source for nvim-cmp
  Plug 'hrsh7th/cmp-nvim-lsp'

  " Snippet completion source for nvim-cmp
  Plug 'hrsh7th/cmp-vsnip'

  " Other usefull completion sources
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/cmp-buffer'

  " See hrsh7th's other plugins for more completion sources!

  " To enable more of the features of rust-analyzer, such as inlay hints and more!
  " * Plug 'simrat39/rust-tools.nvim' */

  " Snippet engine
  Plug 'hrsh7th/vim-vsnip'

  " Fuzzy finder
  " Optional
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'

call plug#end()

colorscheme gruvbox
highlight Normal guibg=none

"mode lhs rhs
let mapleader = " "
nnoremap <leader>ps :lua require('telescope.builtin').grep_string({ search = vim.fn.input("Grep For > ")})<CR>

" edit vim config
nnoremap <leader>cfg :tabnew $MYVIMRC<CR>
nnoremap <silent> <leader><leader> :source $MYVIMRC<CR>

tnoremap <Esc> <C-\><C-n>

" vim-powered terminal in split window
map <Leader>t :vsplit :term <cr>
tmap <Leader>t <c-w>:term <cr>

" vim-powered terminal in new tab
map <Leader>T :tab term <cr>
tmap <Leader>T <c-w>:tab term <cr>

noremap <C-Z> u
"
" #############################################################################
" RUST ANALYZER SETUP
" #############################################################################
"
" Set completeopt to have a better completion experience
" :help completeopt
" menuone: popup even when there's only one match
" noinsert: Do not insert text until a selection is made
" noselect: Do not select, force user to select one from the menu
set completeopt=menuone,noinsert,noselect

" Avoid showing extra messages when using completion
set shortmess+=c

" Configure LSP through rust-tools.nvim plugin.
" rust-tools will configure and enable certain LSP features for us.
" See https://github.com/simrat39/rust-tools.nvim#configuration
lua <<EOF
local nvim_lsp = require'lspconfig'

local opts = {
    tools = { -- rust-tools options
        autoSetHints = true,
        hover_with_actions = true,
        inlay_hints = {
            show_parameter_hints = false,
            parameter_hints_prefix = "",
            other_hints_prefix = "",
        },
    },

    -- all the opts to send to nvim-lspconfig
    -- these override the defaults set by rust-tools.nvim
    -- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer
    server = {
        -- on_attach is a callback called when the language server attachs to the buffer
        -- on_attach = on_attach,
        settings = {
            -- to enable rust-analyzer settings visit:
            -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
            ["rust-analyzer"] = {
                -- enable clippy on save
                checkOnSave = {
                    command = "clippy"
                },
            }
        }
    },
}

require('rust-tools').setup(opts)
EOF

" Setup Completion
" See https://github.com/hrsh7th/nvim-cmp#basic-configuration
lua <<EOF
local cmp = require'cmp'
cmp.setup({
  -- Enable LSP snippets
  snippet = {
    expand = function(args)
        vim.fn["vsnip#anonymous"](args.body)
    end,
  },
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    -- Add tab support
    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
    ['<Tab>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm({
      behavior = cmp.ConfirmBehavior.Insert,
      select = true,
    })
  },

  -- Installed sources
  sources = {
    { name = 'nvim_lsp' },
    { name = 'vsnip' },
    { name = 'path' },
    { name = 'buffer' },
  },
})

-- examples for your init.lua

-- empty setup using defaults
require("nvim-tree").setup()

-- OR setup with some options
require("nvim-tree").setup({
  sort_by = "case_sensitive",
  view = {
    adaptive_size = true,
    side = "right",
    mappings = {
      list = {
        { key = "u", action = "dir_up" },
      },
    },
  },
  renderer = {
    group_empty = true,
  },
  filters = {
    dotfiles = true,
  },
})


EOF

